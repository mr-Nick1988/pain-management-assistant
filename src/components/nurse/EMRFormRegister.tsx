import React, { useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import type { EMR, Diagnosis } from "../../types/nurse";
import { useCreateEmrMutation, useGetIcdDiagnosesQuery } from "../../api/api/apiNurseSlice";
import { validateEmr } from "../../utils/validationEmr.ts";
import { FormCard, FormGrid, FormFieldWrapper, Input, ErrorMessage , PageNavigation } from "../ui";

const EMRFormRegister: React.FC = () => {
    const navigate = useNavigate();

    // üìå –î–æ—Å—Ç–∞—ë–º –∏–∑ URL –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞ (MRN)
    const { mrn } = useParams<{ mrn: string }>();

    // üìå RTK Mutation –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π EMR-–∫–∞—Ä—Ç—ã
    const [createEmr, { isLoading, error }] = useCreateEmrMutation();

    // =======================
    // ü©∫ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã EMR
    // =======================
    const [form, setForm] = useState<EMR>({
        height: 0,
        weight: 0,
        gfr: "",
        childPughScore: "",
        plt: 0,
        wbc: 0,
        sat: 0,
        sodium: 0,
        sensitivities: [],
        diagnoses: [], // —Å–ø–∏—Å–æ–∫ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    });

    // ===============================
    // üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–∏–∞–≥–Ω–æ–∑–æ–≤
    // ===============================
    const [searchTerm, setSearchTerm] = useState("");                 // —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –≤–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const [selectedDiagnoses, setSelectedDiagnoses] = useState<Diagnosis[]>([]); // –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã

    // ==============================
    // üì° RTK Query ‚Äî –ø–æ–∏—Å–∫ ICD –∫–æ–¥–æ–≤
    // ==============================
    const {
        data: icdResults = [],   // —Å–ø–∏—Å–æ–∫ –¥–∏–∞–≥–Ω–æ–∑–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å –±—ç–∫–µ–Ω–¥–∞
        isFetching,              // –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    } = useGetIcdDiagnosesQuery(searchTerm, {
        skip: searchTerm.length < 2, // –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–≤–æ–¥–µ 2+ —Å–∏–º–≤–æ–ª–æ–≤
    });

    // ==========================
    // ‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
    // ==========================
    const [errors, setErrors] = useState<Record<string, string>>({});

    // ===================================
    // ‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç/—á–∏—Å–µ–ª
    // ===================================
    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value, type } = e.target;
        setForm((prev) => ({
            ...prev,
            [name]: type === "number" ? Number(value) : value, // –∞–≤—Ç–æ-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∏—Å–µ–ª
        }));
    };

    // =====================================================
    // üíä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    // =====================================================
    const handleSensitivitiesChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { value } = e.target;
        const items = value
            .split(",")
            .map((s) => s.trim()) // —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            .filter(Boolean);     // —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        setForm((prev) => ({
            ...prev,
            sensitivities: items,
        }));
    };

    // ===========================================================
    // üß© –í—ã–±–æ—Ä –¥–∏–∞–≥–Ω–æ–∑–∞ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    // ===========================================================
    const handleSelectDiagnosis = (diagnosis: Diagnosis) => {
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ–∑ –≤ —Ñ–æ—Ä–º—É
        setForm((prev) => ({
            ...prev,
            diagnoses: [...(prev.diagnoses || []), diagnosis],
        }));

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        setSelectedDiagnoses((prev) =>
            prev.find((d) => d.icdCode === diagnosis.icdCode)
                ? prev
                : [...prev, diagnosis]
        );

        // –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        setSearchTerm("");
    };

    // ==================================
    // üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞ backend
    // ==================================
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!mrn) return; // –±–µ–∑ MRN –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å EMR

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        const validationErrors = validateEmr(form);
        setErrors(validationErrors);
        if (Object.keys(validationErrors).length > 0) return;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ backend —á–µ—Ä–µ–∑ RTK mutation
        try {
            await createEmr({ mrn, data: form }).unwrap();
            navigate("/nurse");
        } catch (error: unknown) {
            console.error("Failed to create EMR:", error);
        }
    };

    // =======================
    // üß± JSX-—Ä–∞–∑–º–µ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    // =======================
    return (
        <div className="p-6">
            <FormCard
                title="Register EMR"
                onSubmit={handleSubmit}
                onCancel={() => navigate("/nurse")}
                submitText="Save & Go to Dashboard"
                isLoading={isLoading}
                error={
                    error && (
                        <ErrorMessage
                            message={
                                ("data" in error &&
                                error.data &&
                                typeof error.data === "object" &&
                                "message" in error.data
                                    ? String((error.data as { message?: string }).message)
                                    : undefined) || "Failed to save EMR"
                            }
                        />
                    )
                }
            >
                <FormGrid columns={2}>
                    {/* --- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è EMR --- */}
                    <FormFieldWrapper label="Height (cm)" required hint="Enter 50‚Äì250 cm" error={errors.height}>
                        <Input
                            type="number"
                            name="height"
                            placeholder="Height"
                            value={form.height || ""}
                            onChange={handleChange}
                            required
                        />
                    </FormFieldWrapper>

                    <FormFieldWrapper label="Weight (kg)" required hint="Enter 20‚Äì300 kg" error={errors.weight}>
                        <Input
                            type="number"
                            name="weight"
                            placeholder="Weight"
                            value={form.weight || ""}
                            onChange={handleChange}
                            required
                        />
                    </FormFieldWrapper>

                    <FormFieldWrapper label="GFR" required hint="Enter A‚ÄìE or 0‚Äì120 ml/min" error={errors.gfr}>
                        <Input
                            type="text"
                            name="gfr"
                            placeholder="Kidney function"
                            value={form.gfr}
                            onChange={handleChange}
                            required
                        />
                    </FormFieldWrapper>

                    <FormFieldWrapper label="Child-Pugh Score" required hint="Enter A, B or C" error={errors.childPughScore}>
                        <Input
                            type="text"
                            name="childPughScore"
                            placeholder="A/B/C"
                            value={form.childPughScore}
                            onChange={handleChange}
                            required
                        />
                    </FormFieldWrapper>

                    <FormFieldWrapper label="PLT" required hint="Enter 50‚Äì600 K/¬µL" error={errors.plt}>
                        <Input
                            type="number"
                            name="plt"
                            placeholder="Platelet count"
                            value={form.plt || ""}
                            onChange={handleChange}
                            required
                        />
                    </FormFieldWrapper>

                    <FormFieldWrapper label="WBC" required hint="Enter 3.5‚Äì10.0 √ó10¬≥/¬µL" error={errors.wbc}>
                        <Input
                            type="number"
                            name="wbc"
                            placeholder="White blood cells"
                            value={form.wbc || ""}
                            onChange={handleChange}
                            required
                        />
                    </FormFieldWrapper>

                    <FormFieldWrapper label="SAT (%)" required hint="Enter 85‚Äì100%" error={errors.sat}>
                        <Input
                            type="number"
                            name="sat"
                            placeholder="Oxygen saturation"
                            value={form.sat || ""}
                            onChange={handleChange}
                            required
                        />
                    </FormFieldWrapper>

                    <FormFieldWrapper label="Sodium (mmol/L)" required hint="Enter 110‚Äì160 mmol/L" error={errors.sodium}>
                        <Input
                            type="number"
                            name="sodium"
                            placeholder="Sodium"
                            value={form.sodium || ""}
                            onChange={handleChange}
                            required
                        />
                    </FormFieldWrapper>
                </FormGrid>

                {/* üíä –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å */}
                <FormFieldWrapper label="Sensitivities" hint="Example: Paracetamol, Tramadol, Ibuprofen">
                    <Input
                        type="text"
                        name="sensitivities"
                        placeholder="Comma-separated (e.g. Paracetamol, Tramadol)"
                        onChange={handleSensitivitiesChange}
                    />
                </FormFieldWrapper>

                {/* üß† –î–∏–∞–≥–Ω–æ–∑—ã —Å –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–æ–º –ø–æ ICD */}
                <FormFieldWrapper
                    label="Diagnoses"
                    hint="Start typing diagnosis name (2+ letters)..."
                >
                    <Input
                        type="text"
                        value={searchTerm}
                        placeholder="Search diagnosis..."
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />

                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
                    {isFetching && (
                        <p className="text-gray-400 text-sm mt-1">Searching...</p>
                    )}

                    {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ */}
                    {icdResults.length > 0 && searchTerm.length >= 2 && (
                        <ul className="border rounded mt-1 bg-white shadow max-h-40 overflow-auto">
                            {icdResults.slice(0, 10).map((d) => (
                                <li
                                    key={d.icdCode}
                                    onClick={() => handleSelectDiagnosis(d)}
                                    className="p-2 hover:bg-blue-100 cursor-pointer"
                                >
                                    {d.description}{" "}
                                    <span className="text-gray-500 text-sm">({d.icdCode})</span>
                                </li>
                            ))}
                        </ul>
                    )}

                    {/* –°–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ */}
                    {selectedDiagnoses.length > 0 && (
                        <ul className="mt-3 text-sm">
                            {selectedDiagnoses.map((d) => (
                                <li key={d.icdCode}>
                                    ‚úÖ {d.description}{" "}
                                    <span className="text-gray-500">({d.icdCode})</span>
                                </li>
                            ))}
                        </ul>
                    )}
                </FormFieldWrapper>
            </FormCard>
        <PageNavigation />

        </div>
    );
};

export default EMRFormRegister;